import{_ as t}from"./chunks/1711003537001.qRra_Ffi.js";import{_ as e,c as o,o as i,a5 as a}from"./chunks/framework.BVVl-PlE.js";const b=JSON.parse('{"title":"MapStruct使用和详解，看这篇就够了","description":"","frontmatter":{"outline":"deep","title":"MapStruct使用和详解，看这篇就够了","subtitle":"MapStruct是一个生成类型安全，高性能且无依赖的JavaBea 映射代码的注解处理器","author":"vansiit","header-img":"img/bg/output6.jpg","header-mask":0.5,"catalog":true,"foot":true,"tags":["Java","util"]},"headers":[],"relativePath":"2024/03/21/git-common-commands.md","filePath":"2024/03/21/git-common-commands.md","lastUpdated":1721875332000}'),p={name:"2024/03/21/git-common-commands.md"},r=a('<h1 id="git-常用指令-以及-idea常用commit插件推荐" tabindex="-1">Git 常用指令 以及 IDEA常用commit插件推荐 <a class="header-anchor" href="#git-常用指令-以及-idea常用commit插件推荐" aria-label="Permalink to &quot;Git 常用指令 以及 IDEA常用commit插件推荐&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p><img src="'+t+'" alt="img.png"></p><ul><li>工作区 (workspace)</li></ul><blockquote><p>就是我们当前工作空间，也就是我们当前能在本地文件夹下面看到的文件结构。初始化工作空间或者工作空间 clean 的时候，文件内容和 index 暂存区是一致的，随着修改，工作区文件在没有 add 到暂存区时候，工作区将和暂存区是不一致的。</p></blockquote><ul><li>暂存区 (index)</li></ul><blockquote><p>老版本概念也叫 Cache 区，就是文件暂时存放的地方，所有暂时存放在暂存区中的文件将随着一个 commit 一起提交到 local repository 此时 local repository 里面文件将完全被暂存区所取代。暂存区是 git 架构设计中非常重要和难理解的一部分。</p></blockquote><ul><li>本地仓库 (local repository)</li></ul><blockquote><p>git 是分布式版本控制系统，和其他版本控制系统不同的是他可以完全去中心化工作，你可以不用和中央服务器 (remote server) 进行通信，在本地即可进行全部离线操作，包括 log，history，commit，diff 等等。完成离线操作最核心是因为 git 有一个几乎和远程一样的本地仓库，所有本地离线操作都可以在本地完成，等需要的时候再和远程服务进行交互。</p></blockquote><ul><li>远程仓库 (remote repository)</li></ul><blockquote><p>中心化仓库，所有人共享，本地仓库会需要和远程仓库进行交互，也就能将其他所有人内容更新到本地仓库把自己内容上传分享给其他人。结构大体和本地仓库一样。</p></blockquote><h2 id="git-clone" tabindex="-1">git clone <a class="header-anchor" href="#git-clone" aria-label="Permalink to &quot;git clone&quot;">​</a></h2><p>git checkout -b development 创建本地分支并切换到这个分支</p><p>git checkout --track origin/test-dev 从远程拉分支</p><p>git push origin development 创建远程分支</p><p>git branch -u origin/luozhengshun 建立本地远程联系</p><p>git branch -a 查看远程分支</p><p>git branch 查看本地分支</p><p>git pull 更新本地库</p><p>git add .添加到本地库</p><p>git commit -m &#39;提交属性&#39; 提交达到本地库</p><p>git push 提交远程库</p><p>git status 查看状态</p><p>git diff xxx查看更改</p><p>git log 查看历史</p><p>git checkout 分支名切换分支</p><p>git branch -d 分支名删除本地分支</p><p>git push origin --delete 分支名删除远程分支</p><p>git checkout master 切换到Master分支</p><p>git merge —no-ff development 对Development分支进行合并</p><p>git remote 列出所有远程主机</p><p>git remote update origin --prune 更新远程主机origin 整理分支</p><p>git branch -r 列出远程分支</p><p>git branch -vv 查看本地分支和远程分支对应关系</p><p>git checkout -b gpf origin/gpf 新建本地分支gpf与远程gpf分支相关联</p><p>git reset --soft HEAD~1 撤销上一次conmmit，1代表上最近1次，若想撤销最近2次则改为2</p>',36),c=[r];function l(n,m,g,s,u,d){return i(),o("div",null,c)}const f=e(p,[["render",l]]);export{b as __pageData,f as default};
