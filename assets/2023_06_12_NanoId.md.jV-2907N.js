import{_ as a,c as s,o as n,a5 as i}from"./chunks/framework.BVVl-PlE.js";const b=JSON.parse('{"title":"各种常用ID生成器的对比，重点介绍一下NanoId","description":"","frontmatter":{"outline":"deep","title":"各种常用ID生成器的对比，重点介绍一下NanoId"},"headers":[],"relativePath":"2023/06/12/NanoId.md","filePath":"2023/06/12/NanoId.md","lastUpdated":1731573618000}'),e={name:"2023/06/12/NanoId.md"},l=i(`<h1 id="各种常用id生成器的对比-重点介绍一下nanoid" tabindex="-1">各种常用ID生成器的对比，重点介绍一下NanoId <a class="header-anchor" href="#各种常用id生成器的对比-重点介绍一下nanoid" aria-label="Permalink to &quot;各种常用ID生成器的对比，重点介绍一下NanoId&quot;">​</a></h1><h2 id="一-uuid" tabindex="-1">一.UUID <a class="header-anchor" href="#一-uuid" aria-label="Permalink to &quot;一.UUID&quot;">​</a></h2><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><p>使用UUID作为主键具有以下优点：</p><h4 id="_1-分布式id" tabindex="-1">1.分布式ID <a class="header-anchor" href="#_1-分布式id" aria-label="Permalink to &quot;1.分布式ID&quot;">​</a></h4><p>UUID值在表，数据库甚至在服务器上都是唯一的，允许您从不同数据库合并行或跨服务器分发数据库。</p><h4 id="_2-安全性" tabindex="-1">2.安全性 <a class="header-anchor" href="#_2-安全性" aria-label="Permalink to &quot;2.安全性&quot;">​</a></h4><p>UUID值不会公开有关数据的信息，因此在URL中使用更安全。</p><h4 id="_3-通用性" tabindex="-1">3.通用性 <a class="header-anchor" href="#_3-通用性" aria-label="Permalink to &quot;3.通用性&quot;">​</a></h4><p>可以在避免往返数据库服务器的任何地方生成UUID值。它也简化了应用程序中的逻辑。</p><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><p>除了优势之外，UUID值也存在一些缺点：</p><h4 id="_1-存储空间多" tabindex="-1">1.存储空间多 <a class="header-anchor" href="#_1-存储空间多" aria-label="Permalink to &quot;1.存储空间多&quot;">​</a></h4><p>存储UUID值(16字节)比整数(4字节)或甚至大整数(8字节)占用更多的存储空间。</p><h4 id="_2-调试似乎更加困难" tabindex="-1">2.调试似乎更加困难 <a class="header-anchor" href="#_2-调试似乎更加困难" aria-label="Permalink to &quot;2.调试似乎更加困难&quot;">​</a></h4><p>想象一下WHERE id =&#39;9d6212cf-72fc-11e7-bdf0-f0def1e6646c&#39;和WHERE id = 10哪个舒服一点？</p><h4 id="_3-性能问题" tabindex="-1">3.性能问题 <a class="header-anchor" href="#_3-性能问题" aria-label="Permalink to &quot;3.性能问题&quot;">​</a></h4><p>使用UUID值可能会导致性能问题，因为它们的大小和没有被排序。</p><h2 id="二-雪花算法" tabindex="-1">二.雪花算法 <a class="header-anchor" href="#二-雪花算法" aria-label="Permalink to &quot;二.雪花算法&quot;">​</a></h2><p>Snowflake 雪花算法，由Twitter提出并开源，可在分布式环境下用于生成唯一ID的算法。该算法生成的是一个64位的ID。在同一个进程中，它首先是通过时间位保证不重复，如果时间相同则是通过序列位保证。同时由于时间位是单调递增的，且各个服务器如果大体做了时间同步，那么生成的主键在分布式环境可以认为是总体有序的，这就保证了对索引字段的插入的高效性。例如 MySQL 的 Innodb 存储引擎的主键。</p><p>使用雪花算法生成的主键，二进制表示形式包含 4 部分，从高位到低位分表为：1bit 符号位、41bit 时间戳位、10bit 工作进程位以及 12bit 序列号位。</p><blockquote><p>符号位（1bit） 预留的符号位，恒为零。</p></blockquote><blockquote><p>时间戳位（41bit） 41 位的时间戳可以容纳的毫秒数是 2 的 41 次幂，一年所使用的毫秒数是：365 * 24 * 60 * 60 * 1000。通过计算可知：Math.pow(2, 41) / (365 * 24 * 60 * 60 * 1000L); 结果约等于 69.73 年。Apache ShardingSphere 的雪花算法的时间纪元从 2016 年 11 月 1 日零点开 始，可以使用到 2086 年，相信能满足绝大部分系统的要求。</p></blockquote><blockquote><p>工作进程位（10bit） 5位workerId，5位datacenterId。 该标志在 Java 进程内是唯一的，如果是分布式应用部署应保证每个工作进程的 id 是不同的。该值默认为0，可通过属性设置。</p></blockquote><blockquote><p>序列号位（12bit） 该序列是用来在同一个毫秒内生成不同的 ID。如果在这个毫秒内生成的数量超过 4096 (2 的 12 次幂)，那么生成器会等待到下个毫秒继续生成。</p></blockquote><p><img src="https://vansiit.cc/img/nanoId/SnowFlake.png" alt="img.png"></p><h3 id="优点-1" tabindex="-1">优点 <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点&quot;">​</a></h3><h4 id="_1-整型且递增" tabindex="-1">1.整型且递增 <a class="header-anchor" href="#_1-整型且递增" aria-label="Permalink to &quot;1.整型且递增&quot;">​</a></h4><p>为何追求递增？</p><p>因为递增最大的优势就是对磁盘IO是友好的。</p><p>熟悉磁盘结构的同学们都知道，随机写的效率是很慢的，</p><p>因为磁头需要转动到指定的位置，这个磁头转动的过程比起cpu或者内存来，完全不是一个数量级的，</p><p>所以如果能尽可能的使数据靠近在一一起（递增就能靠在一起），那么就不需要频繁的抬起磁头，转动磁盘，写数据了，一路写到底会快很多。</p><h4 id="_2-生成效率极高" tabindex="-1">2.生成效率极高 <a class="header-anchor" href="#_2-生成效率极高" aria-label="Permalink to &quot;2.生成效率极高&quot;">​</a></h4><p>在高并发，以及分布式环境下，除了生成不重复 id，每秒可生成百万个不重复 id，生成效率极高。</p><h4 id="_3-不依赖第三方库" tabindex="-1">3.不依赖第三方库 <a class="header-anchor" href="#_3-不依赖第三方库" aria-label="Permalink to &quot;3.不依赖第三方库&quot;">​</a></h4><p>不依赖第三方的库，或者中间件，算法简单，在内存中进行。</p><h3 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><p>依赖服务器时间，服务器时钟回拨时可能会生成重复 id。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>产生的id的组成：(符号位)+时间戳+机器id+序列号;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>这三部分，机器id可以不重复，序列号也可以做到不重复，那唯一可能重复的就是时间戳了。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>时间怎么会重复？</span></span>
<span class="line"><span></span></span>
<span class="line"><span>时间明明是一直向前的，除非时间倒退，退回到之前的某个时间点，再次产生的id才可能是重复的。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>你说对了，人类感受的时间是不会倒退的，但是，机器上的时间都是时钟，时钟可能会因为种种原因变慢了或者变快了。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>比如有一天你（或者机器上的时间同步器）发现有一台机器的时钟变快了，于是往回拨1秒，然后就可能会出现重复的id</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>消除时钟的问题</span></span>
<span class="line"><span></span></span>
<span class="line"><span>某些对时间及其敏感的程序，甚至会考虑使用GPS上的原子钟来做时钟同步;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>或者，谷歌直接在数据中心自己搞原子钟，然并用处并不大，时间同步时的网络传输延迟、抖动，依然存在。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>永远都是只能减小，无法消灭。</span></span></code></pre></div><hr><h2 id="三-nanoid" tabindex="-1">三.NanoID <a class="header-anchor" href="#三-nanoid" aria-label="Permalink to &quot;三.NanoID&quot;">​</a></h2><p>UUID 是软件开发中最常用的通用标识符之一。然而，在过去的几年里，其他的竞品挑战了它的存在。其中，NanoID 是 UUID 的主要竞争对手之一。但是，这两者之间的主要区别很简单。它归结为键所使用的字母表。由于 NanoID 使用比 UUID 更大的字母表，因此较短的 ID 可以用于与较长的 UUID 相同的目的。</p><h3 id="优点-2" tabindex="-1">优点 <a class="header-anchor" href="#优点-2" aria-label="Permalink to &quot;优点&quot;">​</a></h3><h4 id="_1-nanoid的大小只有108字节" tabindex="-1">1.NanoID的大小只有108字节 <a class="header-anchor" href="#_1-nanoid的大小只有108字节" aria-label="Permalink to &quot;1.NanoID的大小只有108字节&quot;">​</a></h4><p>与UUID不同，NanoID的大小比UUID小4.5倍，并且没有任何依赖性。这直接影响数据的大小。例如，使用NanoID的对象对于数据传输和存储来说既小又紧凑。随着程序的增长，这些特点将变得显而易见。</p><h4 id="_2-更安全" tabindex="-1">2.更安全 <a class="header-anchor" href="#_2-更安全" aria-label="Permalink to &quot;2.更安全&quot;">​</a></h4><p>在大多数随机生成器中，它们使用不安全的Math.random()。但是，NanoID使用更安全的crypto module和 Web Crypto API。此外，NanoID在ID生成器的实现过程中使用了自己的算法，称为uniform algorithm，而不是使用random % alphabet.</p><h4 id="_3-速度快-结构紧凑" tabindex="-1">3.速度快，结构紧凑 <a class="header-anchor" href="#_3-速度快-结构紧凑" aria-label="Permalink to &quot;3.速度快，结构紧凑&quot;">​</a></h4><p>NanoID比UUID快60%。在UUID的字母表里有36个字符，而NanoID只有21个字符。</p><h4 id="_4-更多语言" tabindex="-1">4.更多语言 <a class="header-anchor" href="#_4-更多语言" aria-label="Permalink to &quot;4.更多语言&quot;">​</a></h4><p>NanoID 支持 14 种不同的编程语言，它们分别是：C#、C++、Clojure 和 ClojureScript、Crystal、Dart &amp; Flutter、Deno、Go、Elixir、Haskell、Janet、Java、Nim、Perl、PHP、带字典的 Python、Ruby、Rust、Swift。</p><h4 id="_5-自定义字母-和长度" tabindex="-1">5.自定义字母，和长度 <a class="header-anchor" href="#_5-自定义字母-和长度" aria-label="Permalink to &quot;5.自定义字母，和长度&quot;">​</a></h4><p>NanoID 的另一个现有功能是它允许开发人员使用自定义字母表。我们可以更改文字或 id 的大小</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * The default alphabet used by this class.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Creates url-friendly NanoId Strings using 64 unique symbols.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] DEFAULT_ALPHABET </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toCharArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * The default size used by this class.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Creates NanoId Strings with slightly more unique values than UUID v4.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DEFAULT_SIZE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h4 id="_6-没有第三方依赖" tabindex="-1">6.没有第三方依赖 <a class="header-anchor" href="#_6-没有第三方依赖" aria-label="Permalink to &quot;6.没有第三方依赖&quot;">​</a></h4><p>由于 NanoID 不依赖任何第三方依赖，随着时间的推移，它能够变得更加稳定自治。从长远来看，这有利于优化包的大小，并使其不太容易出现依赖项带来的问题。</p><h3 id="缺点-2" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-2" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><p>[Nano ID Collision Calculator] : <a href="https://zelark.github.io/nano-id-cc/" target="_blank" rel="noreferrer">https://zelark.github.io/nano-id-cc/</a></p><p>从官方给出的碰撞计算测试来看</p><p>每秒生成一亿个ID，100万年有1%的重复概率。比uuid还是差不少</p><p><img src="https://vansiit.cc/img/nanoId/CollisionCalculator.png" alt="CollisionCalculator.png"></p><hr><h2 id="四-mongodb的objectid" tabindex="-1">四.mongoDB的ObjectId <a class="header-anchor" href="#四-mongodb的objectid" aria-label="Permalink to &quot;四.mongoDB的ObjectId&quot;">​</a></h2><p>ObjectID 长度为 12 字节，由几个 2-4 字节的链组成。每个链代表并指定文档身份的具体内容。以下的值构成了完整的 12 字节组合：</p><blockquote><p>一个 4 字节的值，表示自 Unix 纪元以来的秒数</p></blockquote><blockquote><p>一个 3 字节的机器标识符</p></blockquote><blockquote><p>一个 2 字节的进程 ID</p></blockquote><blockquote><p>一个 3 字节的计数器，以随机值开始</p></blockquote><p><img src="https://vansiit.cc/img/nanoId/objectId.png" alt="objectId.png"></p><h2 id="七-参考资料" tabindex="-1">七.参考资料： <a class="header-anchor" href="#七-参考资料" aria-label="Permalink to &quot;七.参考资料：&quot;">​</a></h2><ul><li><p><a href="https://github.com/aventrix/jnanoid" target="_blank" rel="noreferrer">github jnanoid</a></p></li><li><p><a href="https://blog.bitsrc.io/why-is-nanoid-replacing-uuid-1b5100e62ed2" target="_blank" rel="noreferrer">Why is NanoID Replacing UUID?</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/387924041" target="_blank" rel="noreferrer">译 为什么 NanoID 会取代 UUID</a></p></li></ul>`,72),t=[l];function p(h,o,r,d,c,k){return n(),s("div",null,t)}const D=a(e,[["render",p]]);export{b as __pageData,D as default};
